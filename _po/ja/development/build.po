msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"PO-Revision-Date: 2024-02-14 09:55+0900\n"

msgid ""
"---\n"
"title: Build\n"
"---"
msgstr ""
"---\n"
"title: ビルド\n"
"---"

msgid "# Build"
msgstr "# ビルド"

msgid ""
"It's recommended that you build both PostgreSQL and PGroonga with debug "
"options."
msgstr ""
"PostgreSQLもPGroonaもどちらもデバッグオプション付きでビルドすることをオススメ"
"します。"

msgid ""
"It's better that you [build Groonga][groonga-build] with debug options "
"(Groonga's `configure` provides `--enable-debug` option) too. If you use "
"[packaged Groonga][groonga-install], you need to install development "
"package. It's `libgroonga-dev` for Debian family distribution and `groonga-"
"devel` for Red Hat family distribution."
msgstr ""
"Groongaもデバッグオプション（Groongaの`configure`には`--enable-debug`オプショ"
"ンがある）で[ビルド][groonga-build]した方が便利なことが多いです。[Groongaの"
"パッケージ][groonga-install]を使う場合は、開発用パッケージをインストールする"
"必要があります。Debian系のディストリビューションでは`libgroonga-dev`で、Red "
"Hat系のディストリビューションでは`groonga-devel`です。"

msgid ""
"You need to install `token_fitlers/stem` Groonga plugin to run all tests. "
"You can install it by `groonga-token-filter-stem` package."
msgstr ""
"すべてのテストを実行するためには`token_fitlers/stem`というGroongaのプラグイン"
"をインストールする必要があります。`groonga-token-filter-stem`パッケージをイン"
"ストールするとインストールできます。"

msgid "## How to build PostgreSQL"
msgstr "## PostgreSQLのビルド方法"

msgid ""
"Download source from [the PostgreSQL site][postgresql-source-download]. Here "
"are command lines to download the source of PostgreSQL {{ site."
"development_postgresql_version }} and extract it:"
msgstr ""
"[PostgreSQLのサイト][postgresql-source-download]からソースをダウンロードしま"
"す。以下はPostgreSQL {{ site.development_postgresql_version }}のソースをダウ"
"ンロードして展開するコマンドラインです。"

msgid ""
"```console\n"
"% wget https://ftp.postgresql.org/pub/source/v{{ site."
"development_postgresql_version }}/postgresql-{{ site."
"development_postgresql_version }}.tar.bz2\n"
"% tar xf postgresql-{{ site.development_postgresql_version }}.tar.bz2\n"
"% cd postgresql-{{ site.development_postgresql_version }}\n"
"```"
msgstr ""

msgid ""
"Run `configure` with `CFLAGS=\"-O0 -g3\"` argument. It enables debug build. "
"`--prefix=/tmp/local` is optional:"
msgstr ""
"`CFLAGS=\"-O0 -g3\"`引数付きで`configure`を実行します。これでデバッグビルドに"
"なります。`--prefix=/tmp/local`は指定してもしなくてもどちらでもよいです。"

msgid ""
"```console\n"
"% ./configure CFLAGS=\"-O0 -g3\" --prefix=/tmp/local\n"
"```"
msgstr ""

msgid "Build and install PostgreSQL:"
msgstr "PostgreSQLをビルドしてインストールします。"

msgid ""
"```console\n"
"% make -j$(nproc) > /dev/null\n"
"% make install > /dev/null\n"
"% (cd contrib/postgres_fdw && make install > /dev/null)\n"
"```"
msgstr ""

msgid "Initialize and run PostgreSQL:"
msgstr "PostgreSQLを初期化して実行します。"

msgid ""
"```console\n"
"% mkdir -p /tmp/local/var/lib\n"
"% /tmp/local/bin/initdb \\\n"
"  --locale C \\\n"
"  --encoding UTF-8 \\\n"
"  --set=enable_partitionwise_join=on \\\n"
"  --set=max_prepared_transactions=1 \\\n"
"  --set=random_page_cost=0 \\\n"
"  -D /tmp/local/var/lib/postgresql\n"
"% /tmp/local/bin/postgres -D /tmp/local/var/lib/postgresql\n"
"```"
msgstr ""

msgid ""
"The following one liner is useful to reset all PostgreSQL related data. You "
"store the one liner in your shell history, you can rerun the one linear "
"quickly:"
msgstr ""
"以下のワンライナーはPostgreSQL関連のすべてのデータをリセットするときに便利で"
"す。このワンライナーをシェルのヒストリーに入れておけば、すぐにこのワンライ"
"ナーを再実行できます。"

msgid ""
"```console\n"
"% rm -rf /tmp/local/var/lib/postgresql && \\\n"
"    mkdir -p /tmp/local/var/lib/postgresql &&\n"
"    /tmp/local/bin/initdb \\\n"
"      --locale C \\\n"
"      --encoding UTF-8 \\\n"
"      --set=enable_partitionwise_join=on \\\n"
"      --set=max_prepared_transactions=1 \\\n"
"      --set=random_page_cost=0 \\\n"
"      -D /tmp/local/var/lib/postgresql && \\\n"
"   /tmp/local/bin/postgres -D /tmp/local/var/lib/postgresql\n"
"```"
msgstr ""

msgid "## How to build and test PGroonga"
msgstr "## PGroongaのビルド・テスト方法"

msgid ""
"It's recommended that you use the latest PGroonga instead of released "
"PGroonga. Here are command lines to clone the latest PGroonga source:"
msgstr ""
"リリース版のPGroongaではなく最新のPGroongaを使うことをオススメします。以下は"
"最新のPGroongaのソースをクローンするコマンドラインです。"

msgid ""
"```console\n"
"% git clone --recursive git@github.com:pgroonga/pgroonga.git\n"
"% cd pgroonga\n"
"```"
msgstr ""

msgid "PGroonga has two test types:"
msgstr "PGroongaのテストは2種類あります。"

msgid "  * SQL based regression tests"
msgstr "  * SQLベースのリグレッションテスト"

msgid "  * Ruby and SQL based [`pgroonga_check`][pgroonga-check] tests"
msgstr "  * RubyとSQLを使った[`pgroonga_check`][pgroonga-check]のテスト"

msgid ""
"Normally, you only use the former. `test/run-sql-test.sh` is the test runner "
"for the former. It builds and installs PGroonga and runs SQL based "
"regression tests. `PATH=/tmp/local/bin:$PATH` is needed because PostgreSQL "
"is built with `--prefix=/tmp/local`. `pg_config` exists in `/tmp/local/bin`:"
msgstr ""
"通常、前者だけを使います。`test/run-sql-test.sh`は前者用のテストランナーで"
"す。このスクリプトはPGroongaをビルド・インストールし、続けてSQLベースのリグ"
"レッションテストも実行します。`PATH=/tmp/local/bin:$PATH`が必要なのは"
"PostgreSQLを`--prefix=/tmp/local`オプションを指定してビルドしたからです。この"
"場合は`pg_config`は`/tmp/local/bin`にあります。"

msgid ""
"```console\n"
"% PATH=/tmp/local/bin:$PATH test/run-sql-test.sh\n"
"```"
msgstr ""

msgid "See also [test](test.html)."
msgstr "[テスト](test.html)も読んでください。"

msgid "[postgresql-source-download]:https://www.postgresql.org/ftp/source/"
msgstr ""

msgid "[groonga-build]:https://groonga.org/docs/install/others.html"
msgstr ""

msgid "[groonga-install]:https://groonga.org/docs/install.html"
msgstr ""

msgid "[pgroonga-check]:../reference/modules/pgroonga-check.html"
msgstr ""
